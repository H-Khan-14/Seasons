{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js","useLocation.js"],"names":["seasonConfig","Summer","text","iconName","Winter","SeasonDisplay","props","lat","month","season","Date","getMonth","_seasonConfig$season","react_default","a","createElement","className","concat","Spinner","message","efaultProps","ReactDOM","render","content","_useLocation","_useState","useState","_useState2","Object","slicedToArray","setLat","_useState3","_useState4","errorMessage","setErrorMessage","useEffect","window","navigator","geolocation","getCurrentPosition","position","coords","latitude","err","useLocation","_useLocation2","src_SeasonDisplay_0","src_Spinner","document","querySelector"],"mappings":"2IAGMA,QAAe,CACnBC,OAAQ,CACNC,KAAM,uBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,uBACNC,SAAU,eAyBCE,EAbO,SAAAC,GACpB,IATiBC,EAAKC,EAShBC,GATWF,EASQD,EAAMC,KATTC,GASc,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIDK,EAEFZ,EAAaS,GAAhCP,EAFqBU,EAErBV,KAAMC,EAFeS,EAEfT,SAEd,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAC,OAAoBR,IAChCI,EAAAC,EAAAC,cAAA,KAAGC,UAAS,qBAAAC,OAAuBd,EAAvB,WACZU,EAAAC,EAAAC,cAAA,UAAKb,GACLW,EAAAC,EAAAC,cAAA,KAAGC,UAAS,sBAAAC,OAAwBd,EAAxB,aC5BZe,EAAU,SAAAZ,GACd,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBV,EAAMa,WAKjDD,EAAQE,YAAc,CACpBD,QAAS,cAGID,QCIfG,IAASC,OAAOT,EAAAC,EAAAC,cAZJ,WAAM,IAEZQ,EAFYC,ECJlB,WAAqB,IAAAC,EACGC,mBAAS,MADZC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACZlB,EADYoB,EAAA,GACPG,EADOH,EAAA,GAAAI,EAEqBL,mBAAS,IAF9BM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEZE,EAFYD,EAAA,GAEEE,EAFFF,EAAA,GAWnB,OAPAG,oBAAU,WACRC,OAAOC,UAAUC,YAAYC,mBAC3B,SAAAC,GAAQ,OAAIV,EAAOU,EAASC,OAAOC,WACnC,SAAAC,GAAG,OAAIT,EAAgBS,EAAIxB,YAE5B,IAEI,CAACZ,EAAK0B,GDNeW,GADZC,EAAAjB,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACTjB,EADSsC,EAAA,GACJZ,EADIY,EAAA,GAShB,OALEtB,EADEU,EACQpB,EAAAC,EAAAC,cAAA,qBAAakB,GACd1B,EACCM,EAAAC,EAAAC,cAAC+B,EAAD,CAAevC,IAAKA,IACfM,EAAAC,EAAAC,cAACgC,EAAD,CAAS5B,QAAQ,kCAE3BN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcO,IAGtB,MAASyB,SAASC,cAAc","file":"static/js/main.5b2a6c2a.chunk.js","sourcesContent":["import React from 'react';\nimport './SeasonDisplay.css';\n\nconst seasonConfig = {\n  Summer: {\n    text: \"Ohhhh, it's so warm!\",\n    iconName: 'sun'\n  },\n  Winter: {\n    text: \"Brrrr, it's so cold!\",\n    iconName: 'snowflake'\n  }\n};\n\nconst getSeason = (lat, month) => {\n  if (month > 2 && month < 9) {\n    return lat > 0 ? 'Summer' : 'Winter';\n  } else {\n    return lat > 0 ? 'Winter' : 'Summer';\n  }\n};\n\nconst SeasonDisplay = props => {\n  const season = getSeason(props.lat, new Date().getMonth());\n  const { text, iconName } = seasonConfig[season];\n\n  return (\n    <div className={`season-display ${season}`}>\n      <i className={`icon-left massive ${iconName} icon`} />\n      <h1>{text}</h1>\n      <i className={`icon-right massive ${iconName} icon`} />\n    </div>\n  );\n};\n\nexport default SeasonDisplay;\n","import React from 'react';\n\nconst Spinner = props => {\n  return (\n    <div className=\"ui active dimmer\">\n      <div className=\"ui big text loader\">{props.message}</div>\n    </div>\n  );\n};\n\nSpinner.efaultProps = {\n  message: 'Loading...'\n};\n\nexport default Spinner;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './Spinner';\nimport useLocation from './useLocation';\n\nconst App = () => {\n  const [lat, errorMessage] = useLocation();\n  let content;\n  if (errorMessage) {\n    content = <div>Error: {errorMessage}</div>;\n  } else if (lat) {\n    content = <SeasonDisplay lat={lat} />;\n  } else content = <Spinner message=\"Please Allow Location Request\" />;\n\n  return <div className=\"border red\">{content}</div>;\n};\n\nReactDOM.render(<App />, document.querySelector('#root'));\n","import { useState, useEffect } from 'react';\n\nexport default () => {\n  const [lat, setLat] = useState(null);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    window.navigator.geolocation.getCurrentPosition(\n      position => setLat(position.coords.latitude),\n      err => setErrorMessage(err.message)\n    );\n  }, []);\n\n  return [lat, errorMessage];\n};\n"],"sourceRoot":""}